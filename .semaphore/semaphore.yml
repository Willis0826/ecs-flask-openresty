version: v1.0
name: Docker build and pack
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu1804
  containers:
    - name: main
      image: willischou/gomplate-terraform:0.1
blocks:
  - name: Build and pack
    task:
      env_vars:
        - name: ECR_REGISTRY
          value: 292304604452.dkr.ecr.us-east-2.amazonaws.com/ecs-flask-openresty
      secrets:
        - name: AWS
        - name: SELF_SIGNED_CA
      prologue:
        commands:
          - checkout
          # ecr get-login outputs a login command, so execute that with bash
          - aws ecr get-login --no-include-email | bash
      jobs:
        - name: Build and pack flask app
          commands:
            - cd app
            - docker build -t tmp .
            - docker tag tmp "${ECR_REGISTRY}/flask:${SEMAPHORE_GIT_SHA:0:7}"
            - docker tag tmp "${ECR_REGISTRY}/flask:latest"
            - docker push "${ECR_REGISTRY}/flask:${SEMAPHORE_GIT_SHA:0:7}"
            - docker push "${ECR_REGISTRY}/flask:latest"
        - name: Build and pack openresty
          commands:
            - cd nginx
            - mkdir ssl
            - mv ~/resty-auto-ssl-fallback.key ./ssl/resty-auto-ssl-fallback.key
            - mv ~/resty-auto-ssl-fallback.crt ./ssl/resty-auto-ssl-fallback.crt
            - docker build -t tmp .
            - docker tag tmp "${ECR_REGISTRY}/openresty:${SEMAPHORE_GIT_SHA:0:7}"
            - docker tag tmp "${ECR_REGISTRY}/openresty:latest"
            - docker push "${ECR_REGISTRY}/openresty:${SEMAPHORE_GIT_SHA:0:7}"
            - docker push "${ECR_REGISTRY}/openresty:latest"
  - name: Build and pack lambda
    task:
      agent:
        machine:
          type: e1-standard-2
          os_image: ubuntu1804
      env_vars:
        - name: LAMBDA_ASSETS_S3
          value: s3://willis-lambda-assets
      secrets:
        - name: AWS
      jobs:
        - name: slack-notification-worker
          commands:
            - checkout
            - sem-version go 1.13
            - sudo pip install awscli
            - cd lambda/slack-notification-worker
            - GOOS=linux go build -o slack-notification-worker main-gen.go
            - zip slack-notification-worker.zip slack-notification-worker
            - aws s3 mv slack-notification-worker.zip $LAMBDA_ASSETS_S3/${SEMAPHORE_GIT_SHA:0:7}/slack-notification-worker.zip
  - name: Deploy aws resources - dev
    task:
      secrets:
        - name: AWS
        - name: SLACK
      env_vars:
        - name: DEPLOY_ENV
          value: dev
        - name: TERRAFORM_REMOTE_STATE_S3
          value: ecs-flask-openresty-tf-states
        - name: ECR_REGISTRY
          value: 292304604452.dkr.ecr.us-east-2.amazonaws.com/ecs-flask-openresty
        - name: AWS_VPC_ID
          value: vpc-2a324d43
        - name: AWS_SUBNET_A_ID
          value: subnet-5664293f
        - name: AWS_SUBNET_B_ID
          value: subnet-e9ec6492
        - name: ALLOW_SSH_IP
          value: "1.200.8.87/32"
      jobs:
        - name: "Terraform init and apply"
          commands:
            - checkout
            - cd deploy/aws
            - ./deploy.sh ${SEMAPHORE_GIT_SHA:0:7}
